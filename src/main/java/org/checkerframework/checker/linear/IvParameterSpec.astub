import org.checkerframework.checker.linear.qual.Unique;
import org.checkerframework.checker.linear.qual.EnsureUnique;

package javax.crypto.spec;

public class IvParameterSpec {
    @EnsureUnique(
            value = "#1",
            states = {"used"})
    public IvParameterSpec(byte @Unique({"initialized"})[] iv);
}

public class PBEKeySpec {
    @EnsureUnique(
            value = "#2",
            states = {"used"})
    public PBEKeySpec(char[] password, byte @Unique({"initialized"})[] salt, int iterationCount);
    public PBEKeySpec(char[] password, byte @Unique({"initialized"})[] salt, int iterationCount, int keyLength);
}

public class PBEParameterSpec {
    @EnsureUnique(
            value = "#1",
            states = {"used"})
    public PBEParameterSpec(byte @Unique({"initialized"})[] salt, int iterationCount);
}

public class SecretKeySpec {
    @EnsureUnique(
            value = "#1",
            states = {"used"})
    public SecretKeySpec(byte @Unique({"initialized"})[] key, int offset, int len, String algorithm);

    @EnsureUnique(
            value = "#1",
            states = {"used"})
    public SecretKeySpec(byte @Unique({"initialized"})[] key, String algorithm);
}



package java.security;

class SecureRandom {
    @EnsureUnique(
            value = "#1",
            states = {"initialized"})
    void nextBytes(byte @Unique({})[] bytes);
}